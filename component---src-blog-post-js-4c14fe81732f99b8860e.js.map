{"version":3,"sources":["webpack:///./src/blog/components/hero.js","webpack:///./src/blog/components/sidebar.js","webpack:///./src/blog/components/emailForm.js","webpack:///./src/blog/components/suggested.js","webpack:///./src/blog/components/body.js","webpack:///./src/blog/seo.js","webpack:///./src/blog/post.js"],"names":["props","className","to","category","title","author","date","desc","img","location","encodeURIComponent","pathname","query","render","data","base","site","siteMetadata","siteUrl","style","gridArea","position","top","href","action","mailChimpUrl","method","type","name","placeholder","class","mailChimpToken","tabindex","value","allMarkdownRemark","edges","map","node","frontmatter","slug","fluid","postImage","childImageSharp","alt","metaDescription","dangerouslySetInnerHTML","__html","content","image","description","siteTitle","post","dateOriginal","html","original","src"],"mappings":"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","file":"component---src-blog-post-js-4c14fe81732f99b8860e.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport \"tachyons\";\n\n\nexport default props => (\n  <div className=\"bg-washed-red ph2 pv5 flex flex-column justify-center items-center\">\n    <Link to={`/${props.category}`} className=\"sans-serif ttu mid-gray tracked f6\">{props.category}</Link>\n    <h1 className=\"dark-gray display fw4 f1-l f2 tc\">{props.title}</h1>\n    <span className=\"sans-serif tracked ttu f6 mb2\">by {props.author}</span>\n    <span className=\"sans-serif tracked ttu f6\">{props.date}</span>\n  </div>\n)\n","import React from 'react';\nimport {\n  FaPinterestP,\n  FaFacebookF\n} from 'react-icons/fa';\nimport {FiMail} from 'react-icons/fi'\nimport { StaticQuery, graphql } from 'gatsby';\nimport 'tachyons';\n\n\nexport default (props) => {\n  let { desc, img, location } = props;\n  location = encodeURIComponent(location.pathname);\n  desc = encodeURIComponent(desc);\n  img = encodeURIComponent(img);\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              siteUrl\n            }\n          }\n        }  \n      `}\n      render={data => {\n        const base = encodeURIComponent(data.site.siteMetadata.siteUrl);\n        return (\n        <div className=\"dn db-l\" style={{gridArea: \"sidebar\"}}>\n          <div className=\"w3 bg-dark-gray flex flex-wrap\" style={{position: \"sticky\", top: \"4rem\"}}>\n            <a\n              href={`https://pinterest.com/pin/create/button/?url=${base + location}&description=${desc}&media=${base + img}`}\n              className=\"w-100 h3 flex items-center justify-center b near-white\"><FaPinterestP /></a>\n            <a\n              href={`https://www.facebook.com/sharer/sharer.php?u=${base + location}`}\n              className=\"w-100 h3 flex items-center justify-center b near-white\"><FaFacebookF /></a>\n            <a\n              href={`mailto:?&body=${base + location}`}\n              className=\"w-100 h3 flex items-center justify-center b near-white\"><FiMail /></a>\n          </div>\n        </div>\n    )}} />\n  )\n}\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\n\n\n\nexport default props => (\n  <div className=\"w-100 bg-light-gray pa3\">\n    <div className=\"mb4\">\n      <span className=\"f3 tc db display dark-gray mb2\">Subscribe For More</span>\n      <span className=\"f5 tc db serif lh-copy\">Get updates delivered weekly!</span>\n    </div>\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              mailChimpUrl\n              mailChimpToken\n            }\n          }\n        }\n      `}\n      render={data => (\n        <form className=\"w-100 db flex flex-wrap items-center justify-around\" action={data.site.siteMetadata.mailChimpUrl} method=\"POST\">\n          <input type=\"email\" name=\"EMAIL\" className=\"ba b--dark-gray bg-near-white pa2 sans-serif w-100 mb2\" placeholder=\"Your Email\" />\n          <input class=\"dn\" type=\"text\" name={data.site.siteMetadata.mailChimpToken} tabindex=\"-1\" value=\"\" />\n          <button type=\"submit\" className=\"ba b--dark-gray bg-dark-gray near-white sans-serif tracked ttu pv2 w-100 pointer\">Sign Up</button>\n        </form>\n      )} />\n  </div>\n)\n","import React from 'react';\nimport EmailForm from './emailForm.js';\nimport { StaticQuery, graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport 'tachyons';\n\n\nexport default props => (\n  <div className=\"flex flex-column justify-end items-center pa2\" style={{gridArea: \"suggested\"}}>\n    <span className=\"sans-serif tracked ttu tc db pv3\">CONTINUE READING</span>\n    <StaticQuery\n      query={graphql`\n        query {\n          allMarkdownRemark(\n            limit: 2,\n            sort: {order: DESC, fields: frontmatter___date},\n            filter: {frontmatter: {type: {eq: \"post\"}}}) {\n            edges {\n              node {\n                frontmatter {\n                  title\n                  slug\n                  metaDescription\n                  postImage {\n                    childImageSharp {\n                      fluid(maxWidth: 720) {\n                        ...GatsbyImageSharpFluid\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }  \n      `}\n      render={data => data.allMarkdownRemark.edges.map(({ node }) => (\n        <div className=\"w-100 mw6 tc mb4\">\n          <Link to={node.frontmatter.slug}>\n            <Img\n              className=\"h5\"\n              fluid={node.frontmatter.postImage.childImageSharp.fluid}\n              alt={node.frontmatter.metaDescription} />\n          </Link>\n          <Link\n            className=\"f4 serif tc dib pv2 ph3 display dark-gray no-underline\"\n            to={node.frontmatter.slug}>\n            {node.frontmatter.title}\n          </Link>\n        </div>\n      ))} />\n    <EmailForm />\n  </div>\n)\n","import React from \"react\";\nimport Sidebar from \"./sidebar.js\";\nimport Suggested from './suggested.js';\nimport \"tachyons\";\nimport \"../../common/styles/custom.tachyons.css\";\nimport \"../styles/grid.css\";\n\n\nexport default props => (\n  <div className=\"min-vh-100 blog__grid\">\n    <div style={{gridArea: \"header\"}} />\n    <div\n      className=\"mw8 serif f4 lh-copy center pa2 article__container\"\n      style={{gridArea: \"content\"}}\n      dangerouslySetInnerHTML={{__html: props.content}} />\n    <Sidebar\n      img={props.image}\n      desc={props.description}\n      location={props.location}\n    />\n    <Suggested />\n  </div>\n)\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport {StaticQuery, graphql} from 'gatsby';\n\n\nexport default props => (\n  <StaticQuery\n    query={graphql`\n        query {\n          site {\n            siteMetadata {\n              siteTitle: title\n              siteUrl\n            }\n          }\n        }\n      `}\n      render={data => (\n        <Helmet>\n          <script type=\"application/ld+json\">{`\n        {\n          \"@context\": \"http://schema.org\",\n            \"@type\": \"Article\",\n            \"mainEntityOfPage\": {\n              \"@type\": \"WebPage\",\n              \"@id\": \"${data.site.siteMetadata.siteUrl}${props.slug}\"\n            },\n            \"headline\": \"${props.title}\",\n            \"image\": [\"${data.site.siteMetadata.siteUrl}${props.image}\"],\n            \"datePublished\": \"${props.date}\",\n            \"dateModified\": \"${props.date}\",\n            \"author\": {\n              \"@type\": \"Person\",\n              \"name\": \"${props.author}\"\n            },\n            \"publisher\": {\n              \"@type\": \"Organization\",\n              \"name\": \"${data.site.siteMetadata.siteTitle}\",\n              \"logo\": {\n                \"@type\": \"ImageObject\",\n                \"url\": \"${data.site.siteMetadata.siteUrl}/logo.png\"\n              }\n            },\n            \"description\": \"${props.description}\"\n        }\n      `}</script>\n  </Helmet>\n      )} />\n)\n","import React from 'react';\nimport Layout from '../common/layouts';\nimport Hero from './components/hero.js';\nimport Body from './components/body.js';\nimport Seo from './seo.js';\nimport MetaSeo from '../common/seo';\nimport { graphql } from 'gatsby';\n\n\nexport default ({location, data }) => {\n  const {\n    category,\n    date,\n    dateOriginal,\n    author,\n    title,\n    slug,\n    metaDescription\n  } = data.post.frontmatter;\n  const content = data.post.html;\n  return (\n    <Layout>\n      <Seo\n        slug={slug}\n        title={title}\n        date={dateOriginal}\n        description={metaDescription}\n        author={author}\n        image={data.post.frontmatter.postImage.childImageSharp.original.src} />\n      <MetaSeo\n        title={title}\n        description={metaDescription} />\n      <Hero author={author} date={date} category={category} title={title} />\n      <Body\n        content={content}\n        description={metaDescription}\n        image={data.post.frontmatter.postImage.childImageSharp.original.src}\n        location={location}\n      />\n    </Layout>\n  )\n}\n\n\nexport const query = graphql`\n  query($slug: String!) {\n    post: markdownRemark(frontmatter: {slug: {eq: $slug}}) {\n      html\n      frontmatter {\n        date(formatString: \"MMM Do, YYYY\")\n        dateOriginal: date\n        category\n        author\n        title\n        metaDescription\n        slug\n        postImage {\n          childImageSharp {\n            original {\n              src\n            }\n            fluid(maxWidth: 1080) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    date: markdownRemark(frontmatter: {slug: {eq: $slug}}) {\n      frontmatter {\n        date\n      }\n    }\n  }\n`\n"],"sourceRoot":""}